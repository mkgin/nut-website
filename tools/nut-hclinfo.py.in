#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#   Copyright (c) 2009 - Arnaud Quette <arnaud.quette@gmail.com>
#   Copyright (c) 2010 - SÃ©bastien Volle <sebastien.volle@gmail.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# This script convert the driver.list into HTML and JSON formated tables
# These tables are then used by the AsciiDoc generated website and
# documentation

try:
    import json
except ImportError:
    import simplejson as json # Required for Python < 2.6

import re
import os

###

# Global settings

# HCL file location and name
rawHCL="../nut/data/driver.list";

# Website output
webJsonHCL = "../scripts/ups_data.js";
webStaticHCL = "../ups-html.txt";

# Relative path to NUT's manpages directory
manDir = "../nut/docs/man/"
# Path to manpages from HCL *in* website
webManDir = "docs/man/"

# Relative path to NUT's DDL directory
ddlDir = "../ddl/"
# Path to DDL directory *in* website
webDdlDir = "ddl/"

# Device data fields definition
dataFields = [
    "manufacturer",
    "device-type",
    "support-level",
    "model",
    "comment",
    "driver"
]

###

# HTML escaping
# from http://wiki.python.org/moin/EscapingHtml

html_escape_table = {
    "&": "&amp;",
    '"': "&quot;",
    "'": "&apos;",
    ">": "&gt;",
    "<": "&lt;",
}

def html_escape(text):
    """Produce entities within text."""
    return "".join(html_escape_table.get(c,c) for c in text)

###

def buildData(deviceDataFile):
    """
    Read and parse data file under provided path.
    Return a bi-dimensional list representing parsed data.
    """

    deviceData = []

    try:
        # Python 3.x
        file = open(deviceDataFile, "r", encoding='utf-8')
    except TypeError:
        # Python 2.7
        file = open(deviceDataFile, "r")
    except IOError:
        print ("Cannot open", deviceDataFile)
        exit(1)

    for line in file:
        # Ignore empty lines or comments
        if re.match(r"^$|^\s*#", line):
            continue

        # Strip all trailing whitespace chars
        line = re.sub(r"\s+$", "", line)

        # Replace all tabs by commas
        line = re.sub(r"\t", ",", line)

        # Remove trailing comma
        line = re.sub(r",$", "", line)

        # Split fields and append result to device data list
        # We suppose there are no double-quotes in fields
        row = re.findall(r'"([^"]*)",?', line)

        if len(row) != len(dataFields):
            print ("Warning: Unexpected number of fields in line: %s" % row)
            print ("\tLine will be skipped.")
        else:
            deviceData.append(re.findall(r'"([^"]*)",?', line))

    return deviceData

###

def buildHTMLTable(deviceData):
    """
    Convert provided device data into an HTML table.
    Return string representation of the HTML table.

    Identical cells are merged vertically with rowspan attribute.
    The driver column is color-coded on support level.

    A support level column is also provided. It should be hidden in a graphic
    browser but should be visible from a console based browser (w3m).
    """

    from lxml import etree, html
    from lxml.builder import E

    if not type(deviceData).__name__ == "list" or len(deviceData) == 0:
        raise Exception("Incorrect data was provided")

    # HTML table columns definition
    columns = [
        {
            "name": "manufacturer",
            "id": "manufacturer-col",
            "text": "Manufacturer",
            "fields": ["manufacturer"]
        },
        {
            "name": "model",
            "id": "model-col",
            "text": "Model",
            "fields": ["model", "comment"]
        },
        {
            "name": "driver",
            "id": "driver-col",
            "text": "Driver",
            "fields": ["driver"]
        },
        {
            "name": "support-level",
            "id": "support-level-col",
            "text": "Support Level",
            "fields": ["support-level"]
        },
    ]

    # FIXME: CSS classes should be defined in script global settings
    supportLevelClasses = {
        "0": "",
        "1": "red",
        "2": "orange",
        "3": "yellow",
        "4": "blue",
        "5": "green"
    }
    hiddenClass = "hidden"

    # Build table header
    table = E.table(id="ups_list", border="1")
    header = E.tr()

    for column in columns:
        td = E.td(column.get("text"), id=column.get("id"))
        if column["id"] == "support-level-col":
            td.set("class", hiddenClass)
        header.append(td)

    table.append(E.thead(header))

    # Build table body
    tbody = E.tbody(id="ups_list_body")

    cellHistory = []
    rowHistory = deviceData[0][0]
    rows = []
    classes = ("even", "odd")
    currentClass = 0
    manufIndex = dataFields.index("manufacturer")
    lastSeenSupportLevel = "-1"
    supportLevelIndex = dataFields.index("support-level")

    # Build table rows
    for device in deviceData:

        # Devices are expected to have a specified number of fields
        if len(device) < len(dataFields):
            print ("Unexpected number of fields in device: %s" % device)
            print ("Device will not be included in result set.")
            continue

        # Alternate CSS class if current manufacturer is different from the last
        if device[manufIndex] != rowHistory :
            currentClass = (currentClass + 1) % 2
            rowHistory = device[manufIndex]

        cells = []

        colIndex = 0
        for column in columns:
            cellContent = []
            for field in column["fields"]:
                fieldIndex = dataFields.index(field)
                # Link driver => manpage
                if field == "driver":
                    words = device[fieldIndex].split()
                    linkedWords = []
                    for word in words:
                        if word in manPages:
                            linkedWords.append("<a href=\"%s.html\">%s</a>" % (webManDir + word, word))
                        else:
                            linkedWords.append(html_escape(word))
                    cellContent.append(" ".join(linkedWords))
                # Link manufacturer => DDL
                elif field == "manufacturer" and ddl.get(device[fieldIndex].replace(" ", "_")):
                    linkedMfr = "<a href=\"%s/\">%s</a>" % (webDdlDir + device[fieldIndex].replace(" ", "_").replace("%", "%25"), html_escape(device[fieldIndex]))
                    cellContent.append(linkedMfr)
                # Link model => DDL
                elif field == "model" and ddl.get(device[dataFields.index("manufacturer")].replace(" ", "_")) and device[fieldIndex].replace(" ", "_") in ddl[device[dataFields.index("manufacturer")].replace(" ", "_")]:
                    linkedModel = "<a href=\"%s/%s.html\">%s</a>" % (webDdlDir + device[dataFields.index("manufacturer")].replace(" ", "_").replace("%", "%25"), device[fieldIndex].replace(" ", "_").replace("%", "%25"), html_escape(device[fieldIndex]))
                    cellContent.append(linkedModel)
                else:
                    fieldContent = device[fieldIndex]
                    cellContent.append(html_escape(fieldContent))
            cellContent = "<br />".join(cellContent)

            try:
                cH = cellHistory[colIndex]
            except:
                cH = False

            if cH and cH.get("text") == cellContent and (column["name"] != "driver" or (lastSeenSupportLevel == device[supportLevelIndex])):
                cH["rowspan"] = cH.get("rowspan", 1) + 1
            else:
                cell = {
                    "text": cellContent,
                    "rowspan": 1
                }
                if column["name"] == "driver":
                    cell["class"] = supportLevelClasses[device[dataFields.index("support-level")]]
                else:
                    cell["class"] = classes[currentClass]
                if column["name"] == "support-level":
                    cell["class"] = hiddenClass

                cells.append(cell)
                try:
                    cellHistory[colIndex] = cell
                except:
                    cellHistory.append(cell)

            colIndex += 1

        lastSeenSupportLevel = device[supportLevelIndex]

        rows.append(cells)

    for row in rows:
        r = E.tr()
        for cell in row:
            attr = ""
            innerHTML = ""
            for key, value in cell.items():
                try:
                    val = str(value).encode("utf-8")
                except UnicodeDecodeError:
                    # 'ascii' codec can't decode byte 0xc2 in position 0: ordinal not in range(128)
                    # input already non-ascii?
                    val = str(value)

                # decode "val" back, to avoid final markup like
                #   <td class="b" hidden="">b'apc'</td>
                # and have proper
                #   <td class="hidden">apc</td>
                if key != "text":
                    attr += " %s='%s'" % (key, val.decode('UTF-8'))
                else:
                    innerHTML = val.decode('UTF-8')

            r.append(html.fromstring("<td%s>%s</td>" % (attr, innerHTML)))

        tbody.append(r)

    table.append(tbody)

    return etree.tostring(table, pretty_print=True)

###

# Main program

# Build data
deviceData = buildData(rawHCL)

# List of manpages
manPages = []
try:
    for name in os.listdir(manDir):
        if os.path.isfile(os.path.join(manDir, name)) and name.endswith(".html") and name != "index.html":
            manPages.append(name[:-5])
except OSError:
    print ("Unable to get manpage list from '%s'" % manDir)

# List of DDL manufacturers and devices dumps
ddl = {}
try:
    for name in os.listdir(ddlDir):
        path = os.path.join(ddlDir, name)
        if not os.path.isdir(path) or not os.path.isfile(os.path.join(path, "index.html")):
            continue
        ddl[name] = []
        for child in os.listdir(path):
            if os.path.isfile(os.path.join(path, child)) and child.endswith(".html") and child != "index.html":
                ddl[name].append(child[:-5])
except OSError:
    print ("Unable to get DDL manufacturers/devices from '%s'" % ddlDir)

# Dump device data and manpage names as JSON
# Helper inspired by https://stackoverflow.com/a/67724314/4715872
def json_loads(txt):
    try:
        # Approach used in older python, which was
        # deprecated since 3.1, removed since 3.9
        return json.loads(txt, encoding="utf-8")
    except TypeError:
        txt = txt.encode("utf-8")
        value = json.loads(txt)
        return value

def json_dumps(txt):
    try:
        return json.dumps(txt, encoding="utf-8")
    except TypeError:
        try:
            if isinstance(txt, list):
                for entry in txt:
                    entry = entry.encode("utf-8")
            else:
                txt = txt.encode("utf-8")
        except:
            print ("No utf8")
        value = json.dumps(txt)
        return value

jsonData = "var UPSData = %s, NUTManPages = %s, NUTddl = %s" % (json_dumps(deviceData), json_dumps(manPages), json_dumps(ddl))

# First, check if target directory exists
dir = os.path.dirname(webJsonHCL)
try:
    os.makedirs(dir)
except OSError:
    pass

# Write JSON HCL
try:
    file = open(webJsonHCL, "w")
    file.write(jsonData)
    file.close()
    print ("JSON HCL written: %s" % webJsonHCL)
except IOError:
    print ("Unable to write JSON device data to %s" % webJsonHCL)
    exit(1)

# Create HTML table from device data
table = buildHTMLTable(deviceData)
try:
    file = open(webStaticHCL, "wb")
    file.write("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n".encode(encoding='UTF-8'))
    file.write(table)
    file.write("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n".encode(encoding='UTF-8'))
    print ("HTML HCL written: %s" % webStaticHCL)
except IOError:
    print ("Unable to write HTML device table to %s" % webStaticHCL)
    exit(1)

